#!/bin/bash

#
# Copyright (C) 2017 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

# source configuration file
[ -f /etc/hotsync.conf ] && source /etc/hotsync.conf

#Use default ssh port if none configured
if [[ -z ${SLAVE_PORT} ]] ; then
    SLAVE_PORT=273
fi

if [[ -z "$SLAVE_HOST" ]] ; then
    echo "ERROR: remote host is not configured" >&2  
    exit 1
fi

# lock - code taken from yum-cron
# if hot sync is scheduled too often, lock prevents concurrent runs

LOCKDIR=/var/lock/hotsync-cron.lock
LOCKFILE=$LOCKDIR/pidfile
# Try mkdir for the lockfile, will test for and make it in one atomic action
if mkdir $LOCKDIR 2>/dev/null; then
  # store the current process ID in there so we can check for staleness later
  echo "$$" >"${LOCKFILE}"
  # and clean up locks and tempfile if the script exits or is killed  
  trap "{ rm -f $LOCKFILE; rmdir $LOCKDIR 2>/dev/null; exit 255; }" INT TERM EXIT
else
  # lock failed, check if process exists.  First, if there's no PID file
  # in the lock directory, something bad has happened, we can't know the
  # process name, so clean up the old lockdir and restart
  if [ ! -f $LOCKFILE ]; then
    rmdir $LOCKDIR 2>/dev/null
    echo "hotsync-cron: no lock PID, clearing and restarting myself" >&2
    exec $0 "$@"
  fi
  OTHERPID="$(cat "${LOCKFILE}")"
  # if cat wasn't able to read the file anymore, another instance probably is
  # about to remove the lock -- exit, we're *still* locked
    if [ $? != 0 ]; then
      echo "hotsync-cron: lock failed, PID ${OTHERPID} is active" >&2
      exit 0
    fi
    if ! kill -0 $OTHERPID &>/dev/null; then
      # lock is stale, remove it and restart
      echo "hotsync-cron: removing stale lock of nonexistant PID ${OTHERPID}" >&2
      rm -rf "${LOCKDIR}"
      echo "hotsync-cron: restarting myself" >&2
      exec $0 "$@"
    else
      # Remove stale (more than two hours old) lockfiles
      find $LOCKDIR -type f -name 'pidfile' -amin +120 -exec rm -rf $LOCKDIR \;
      # if it's still there, it wasn't too old, bail
      if [ -f $LOCKFILE ]; then
        # lock is valid and OTHERPID is active - exit, we're locked!
        echo "hotsync-cron: lock failed, PID ${OTHERPID} is active" >&2
        exit 0
      else
        # lock was invalid, restart
	echo "hotsync-cron: removing stale lock belonging to stale PID ${OTHERPID}" >&2
        echo "hotsync-cron: restarting myself" >&2
        exec $0 "$@"
      fi
    fi
fi


INCLUDE_FILE=$(mktemp) || (echo "ERROR! fail creating temporary include file" >&2 ; exit 1)
EXCLUDE_FILE=$(mktemp) || (echo "ERROR! fail creating temporary exclude file"  >&2 ; exit 1)

#trap
trap "{ rm -f $LOCKFILE; rmdir $LOCKDIR 2>/dev/null; /bin/rm -f ${INCLUDE_FILE} ${EXCLUDE_FILE}; }" INT TERM EXIT

#execute custom scripts. Every executable in /etc/hotsync.d is executed. INCLUDE_FILE and EXCLUDE_FILE are passed as arguments.
if [[ -d /etc/hotsync.d ]]; then
    for SCRIPT in $(/usr/bin/find /etc/hotsync.d -type f -executable); do
        ${SCRIPT} ${INCLUDE_FILE} ${EXCLUDE_FILE}
    done
fi

#add default backup data files
[ -d /etc/backup-data.d ] && (cat /etc/backup-data.d/*.include >> ${INCLUDE_FILE} ;  cat /etc/backup-data.d/*.exclude >> ${EXCLUDE_FILE})

#exclude backup directory 
echo "/var/lib/nethserver/backup/" >> ${EXCLUDE_FILE}

#exclude nethserver db dir: it's already in configuration backup
echo "/var/lib/nethserver/db/" >> ${EXCLUDE_FILE}

#copy backup config file
echo "/var/lib/nethserver/backup/backup-config.tar.xz" >> ${INCLUDE_FILE}
echo "/var/lib/nethserver/backup/backup-config.tar.xz-content.md5" >> ${INCLUDE_FILE}
echo "/var/lib/nethserver/backup/backup-config.tar.xz.md5" >> ${INCLUDE_FILE}

#copy passwd and group file 
echo "/etc/passwd" >> ${INCLUDE_FILE}
echo "/etc/group" >> ${INCLUDE_FILE}

#copy yum configuration
cat >> ${INCLUDE_FILE} << EOF
/etc/yum/vars
/etc/yum.repos.d
/etc/yum.conf
EOF

XTRA_OPTS=""
if [ "${1:-unset}" == '--dry-run' ]; then
    XTRA_OPTS="--dry-run -v"
fi

# launch backup before rsync
/sbin/e-smith/backup-config

# keep only existing, readable files and directories in include list
SAVEIFS=$IFS
IFS=$(echo -en "\n\b")
TMPLIST=""
for FILE in $(cat ${INCLUDE_FILE}) ; do
    if [[ -r ${FILE} && ( -f ${FILE} || -d ${FILE} ) ]]; then
        TMPLIST="${TMPLIST}${FILE}\n"
    fi
done
echo -e ${TMPLIST} > ${INCLUDE_FILE}
IFS=$SAVEIFS

#copy files with rsync
# -q
#    --files-from=${INCLUDE_FILE} --exclude=.ssh/authorized_keys \
RSYNC_PASSWORD=`/sbin/e-smith/config getprop rsyncd password` /usr/bin/rsync ${XTRA_OPTS} -z -r -a -H -A --delete --numeric-ids \
    --files-from=${INCLUDE_FILE} \
    --exclude-from=${EXCLUDE_FILE} \
    / "rsync://hotsyncuser@127.0.0.1/hotsync/" 2>/tmp/hotsync.log

RC=$?

if ! { [ $RC -eq 23 ] || [ $RC -eq 24 ] || [ $RC -eq 0 ] ;} ; then
  (>&2 echo "hotsync error: rsync returned $RC. rsync output:")
  (>&2 cat /tmp/hotsync.log)
else
    # Rsync success. Save last sync timestamp in /var/run/nethserver-hotsync/LastSyncTS
    if [[ ! -d /var/run/nethserver-hotsync ]]; then
        mkdir -p /var/run/nethserver-hotsync
    fi
    echo $(/usr/bin/date +%s) > /var/run/nethserver-hotsync/LastSyncTS
fi

rm -f /tmp/hotsync.log
